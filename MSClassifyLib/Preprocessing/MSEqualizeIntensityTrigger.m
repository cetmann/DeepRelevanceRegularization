classdef MSEqualizeIntensityTrigger < MSPreprocessingTrigger
    % Preprocessing trigger performing intensity equalization
    % 
    % Properties
    %   args: Parameters (see MSIntensityProfileMap)
    %   dataProfile: Intensity profile generated in apply() method
    %   refProfile: Reference profile used by apply() method
    %
    % Methods
    %   MSEqualizeIntensityTrigger: Constructor
    %   setReferenceProfile: Specify reference profile
    %   hasReferenceProfile: Check whether a reference profile is specified
    %   apply: Perform intensity equalization
    %
    % MSEqualizeIntensityTrigger uses the handle semantic, i.e. when
    % assigning an object of this class to a variable, only a reference to
    % the original object is copied. Use the copy method to create a
    % (shallow) copy.
    
    properties (SetAccess = immutable)
      args;  % Parameters (see MSIntensityProfileMap)
    end
    
    properties (SetAccess = protected)
      dataProfile;  % Intensity profile generated in apply() method
      refProfile;   % Reference profile used by apply() method
    end
    
    methods
      function obj = MSEqualizeIntensityTrigger(varargin)
        % Constructor
        % obj = MSEqualizeIntensityTrigger(): Create trigger object using
        %   default parameters
        % obj = MSEqualizeIntensityTrigger(name, value, ...): Specify
        %   parameters as name value pairs (see MSIntensityProfileMap)

        if nargin == 1 && isa(varargin{1}, 'MSFeatureData')
          % Input argument is an intensity profile
          if ~isfield(varargin{1}.featureInfo, 'intensityProfile')
            error('Input argument is not a valid intensity profile');
          end
          obj.refProfile = varargin{1};
        else
          % Input arguments are name-value pairs, check by creating 
          % temporary intensity profile map
          MSIntensityProfileMap(varargin{:});
          % Store input arguments
          obj.args = varargin;
        end
      end
      
      function setReferenceProfile (obj, prf)
        % Specify reference profile (as generated by MSEqualizeIntensity)
        % If specified non-empty, this overrides the option arguments
        % specified in the constructor. Set to empty in order to clear the
        % reference profile.

        if ~isempty(prf) && (~isa(prf, 'MSFeatureData') || ...
                             ~isfield(prf.featureInfo, 'intensityProfile'))
          error('Input argument is not a valid intensity profile');
        end
        obj.refProfile = prf;
      end
      
      function B = hasReferenceProfile (obj)
        % Return true if a reference profile is specified, false otherwise
        B = ~isempty(obj.refProfile);
      end
      
      function apply (obj, maldiData)
        % Use either reference profile or input arguments
        if obj.hasReferenceProfile
          A = {obj.refProfile};
        else
          A = obj.args;
        end
        % Apply intensity equalization to maldiData
        [msdOut, obj.dataProfile] = MSEqualizeIntensity(maldiData, A{:});
        % Store transformed MALDI data in input object
        maldiData.initFrom(msdOut);
      end
    end
end