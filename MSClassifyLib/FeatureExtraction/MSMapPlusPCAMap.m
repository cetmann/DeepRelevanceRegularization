classdef MSMapPlusPCAMap < MSFeatureMap
  % Feature map combining map and PCA projection
  %
  % The map method creates feature data resulting from first applying roc
  % mapping to the data and in a second phase the resulting data is
  % used twice, once to generate a basis map through PCA and then to
  % project this map onto the data
  %
  % Properties
  %  pCAProjection: MSPCAProjection object
  %  rocMap: MSMzValuesMap object
  %
  % Methods
  %  MSMapPlusPCAMap: Constructor
  %  map_impl: Returns an MSMapPlusPCAMap combining a PCA projection and a feature
  %         map
  %  getNumFeatures: Returns maximum number of features of the output
  %     feature data in map_impl
  %
  % MSMapPlusPCAMap uses the handle semantic, i.e. when 
  % assigning an object of this class to a variable, only a reference to
  % the original object is copied. Use the copy method to create a deep copy.
  
    properties (SetAccess=immutable)
        pCAProjection; %MSPCAProjection object
        featureMap; %MSFeatureMap object
    end
    methods
        function obj=MSMapPlusPCAMap(mzVector, pCAProjection, featureMap, creator)
            %Constructor
            %obj=MSMapPlusPCAMap(mzVector, pCAProjection, featureMap, creator)
            %Creates an MSMapPlusPCAMap from a given PCA projection and
            %feature map
            
            %input validation
            narginchk(3,4);
            if nargin < 4
              % If creator string is not specified, use this class name
              creator = 'MSMapPlusPCAMap';
            end
            % Check type of projection and map
            if ~isa(pCAProjection, 'MSPCAProjection')
                error('pCAProjection must be an MSPCAProjection')
            end
            if ~isa(featureMap, 'MSFeatureMap')
                error('map must be an MSFeatureMap object')
            end
            % the mzVector of rocMap and the input mzVector must be the
            % same
            if any(mzVector~=featureMap.mzVector)
                error('the featureMap mzVector is not compatible with mzVector')
            end
            obj@MSFeatureMap(mzVector, creator);
            obj.pCAProjection=pCAProjection;
            obj.featureMap=featureMap;
        end
    end
    
    methods (Access=protected)
        
        function [featureData,d1,d2]=map_impl(obj, msData, itemMask, numFeatures, ~)
            % Generates a featureData from given data, first applying a
            % map and then using the resulting feature data to
            % generate a basis map, which is finally projected onto the data 
            % featureData=obj.map_impl(msData, itemMask, numFeatures)
            % INPUT
            %   msData:MSMaldiData object to which the map is applied
            %   itemMask: Either an MSLabelData object, a logical or
            %            numerical vector, this mask can be used to exclude
            %            spectra from the process of feature data
            %            generation
            %   numFeatures: Integer restricting the number of features
            %            generated.
            % OUTPUT
            %   featureData: Resulting MSFeatureData object
            
            %apply map to training data
            featureData=obj.featureMap.map(msData, itemMask, numFeatures);
            %create maldiData with dummy mzVector to call the pca
            %projection createMap
            maldiData=MSMaldiData(featureData.data, (1:featureData.dataLength));
            %create linear basis feature map
            featureMapAux=obj.pCAProjection.createMap(maldiData);
            featureData=featureMapAux.map(maldiData);
            d1=[];
            d2=[];
        end
        
        function numFeatures = getNumFeatures(obj)
            % Gets maximum number of features generated by the map
            % numFeatures = obj.getNumFeatures
            numFeatures=min(obj.pCAProjection.maxNumFeatures,obj.featureMap.numFeatures);
        end
    end
end